#!/bin/bash
INSTALL=()
if [ -z "$(which curl)" ]; then
  INSTALL+=("curl")
fi

if [ -z "$(which jq)" ]; then
  INSTALL+=("jq")
fi

if [ -z "$(which php)" ]; then
  INSTALL+=("php")
fi

if [ -n "${INSTALL[*]}" ]; then
  apt-get update && apt-get -y install "${INSTALL[@]}"
fi

CART="cart"
CHECKOUT="checkout"

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    --url)
    URL="$2"
    shift # past argument
    shift # past value
    ;;
    --cart)
    CART="$2"
    shift # past argument
    shift # past value
    ;;
    --checkout)
    CHECKOUT="$2"
    shift # past argument
    shift # past value
    ;;
    --product)
    PRODUCT_ID="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

export PRODUCT_ID
URL="${URL%/}"
URL="${URL#/}"
CART="${CART%/}"
CART="${CART#/}"
CHECKOUT="${CHECKOUT%/}"
CHECKOUT="${CHECKOUT#/}"
export HOME_URL="${URL}"
export AJAX_ADD_TO_CART_URL="${URL}/?wc-ajax=add_to_cart"
export CART_URL="${URL}/${CART}/"
export CHECKOUT_URL="${URL}/${CHECKOUT}/"
export AJAX_CHECKOUT_URL="${URL}/?wc-ajax=checkout"

CHILD_PROCS=()
LAUNCHED_PIPE=$(mktemp)
export FINISHED_PIPE
FINISHED_PIPE=$(mktemp)
export STEPS_PIPE
STEPS_PIPE=$(mktemp)
rm -rf "$STEPS_PIPE"
mkdir -p "$STEPS_PIPE/started"
mkdir -p "$STEPS_PIPE/finished"
mkdir -p "$STEPS_PIPE/max-concurrent"
mkdir -p "$STEPS_PIPE/statuses"

function step_active() {
  STEP=$1
  FILE="$STEPS_PIPE/started/$STEP"
  if [ ! -f "$FILE" ]; then
    echo 0;
    return;
  fi

  LAUNCHED=$(wc -c < "$FILE")
  LAUNCHED=$((LAUNCHED))
  FINISHED=0
  if [ -f "$STEPS_PIPE/finished/$STEP" ]; then
    FINISHED=$(wc -c < "$STEPS_PIPE/finished/$STEP")
    FINISHED=$((FINISHED))
  fi
  echo $((LAUNCHED - FINISHED));
}

export -f step_active

function step_max() {
  STEP=$1
  CURRENT_ACTIVE=$2
  local MAX=0 
  FILE="$STEPS_PIPE/max-concurrent/$STEP"
  if [ -f "$FILE" ]; then
    MAX=$(cat "$FILE")
  fi
  
  if [ $CURRENT_ACTIVE -gt $MAX ]; then
    echo $CURRENT_ACTIVE > "$FILE"
    echo $CURRENT_ACTIVE
  else
    echo $MAX
  fi
}

export -f step_max

export rows_printed
rows_printed=0
export anchor_row
anchor_row=0

function clear() {
  tput clear
  rows_printed=0
}

function save_row() {
  anchor_row=$((rows_printed))
}

function restore_row() {
  tput cup $anchor_row 0
  rows_printed=$((anchor_row))
}

function echo() {
  command echo "$@"
  rows_printed=$((rows_printed + 1))
}

function generate_json() {
  local STEP

  local STATUS_CODE
  local STATUS_FILE
  local STATUS_AMOUNT
  local STATUS_JSON
  local STEP_ACTIVE
  local STEP_JSON

  local TOTAL_ACTIVE=0

  local MAX_ACTIVE=0
  if [ -f "$STEPS_PIPE/max_active" ]; then
    MAX_ACTIVE=$(cat "$STEPS_PIPE/max_active")
  fi

  local FIRST_ERROR_AT_ACTIVE=0
  if [ -f "$STEPS_PIPE/first_error_at_active" ]; then
    FIRST_ERROR_AT_ACTIVE=$(cat "$STEPS_PIPE/first_error_at_active")
  fi

  local SUCCESSFUL_CHECKOUTS=0
  if [ -f "$STEPS_PIPE/successful" ]; then
    SUCCESSFUL_CHECKOUTS="$(cat "$STEPS_PIPE/successful")"
  fi

  local HAS_ERROR=0

  STEP_JSON="{\"steps\":{}, \"active\": 0, \"max_active\": 0, \"first_error_at_active\": 0}"
  if [ -n "$(ls -A "$STEPS_PIPE/started")" ]; then
    for entry in "$STEPS_PIPE/started"/*; do
      STEP="$(basename "$entry")"

      STATUS_JSON="{}"
      if [ -d "$STEPS_PIPE/statuses/$STEP" ] && [ -n "$(ls -A "$STEPS_PIPE/statuses/$STEP")" ]; then
        for STATUS_FILE in "$STEPS_PIPE/statuses/$STEP"/*; do
          STATUS_CODE="$(basename "$STATUS_FILE")"
          STATUS_AMOUNT=$(wc -c < "$STATUS_FILE")
          STATUS_AMOUNT=$((STATUS_AMOUNT))
          STATUS_JSON=$(echo "$STATUS_JSON" | jq -rc ". += {\"$STATUS_CODE\": $STATUS_AMOUNT}")
          if [ "$STATUS_CODE" -ne "200" ]; then
            HAS_ERROR=1
          else
            if [ "$STEP" -eq "5" ]; then
              SUCCESSFUL_CHECKOUTS="$STATUS_AMOUNT"
            fi
          fi
        done
      fi

      STEP_ACTIVE=$(step_active "$STEP")
      STEP_MAX=$(step_max "$STEP" "$STEP_ACTIVE")
      TOTAL_ACTIVE=$((TOTAL_ACTIVE + STEP_ACTIVE))

      STEP_JSON=$(echo "$STEP_JSON" | jq --arg step "$STEP" --argjson max "$STEP_MAX" --argjson active "$STEP_ACTIVE" --argjson total_active "$TOTAL_ACTIVE" --argjson statuses "$STATUS_JSON" -rc '.active = ($total_active) | .steps += {($step): {"active": $active,"max-concurrent": $max, "statuses": ($statuses)}}')
    done
  fi

  if [ $TOTAL_ACTIVE -gt $MAX_ACTIVE ]; then
    echo $TOTAL_ACTIVE > "$STEPS_PIPE/max_active"
    MAX_ACTIVE="$TOTAL_ACTIVE"
  fi

  if [ $HAS_ERROR -eq 1 ]; then
    if [ "$FIRST_ERROR_AT_ACTIVE" -eq 0 ]; then
      echo $TOTAL_ACTIVE > "$STEPS_PIPE/first_error_at_active"
    fi
  fi

  if [ "$SUCCESSFUL_CHECKOUTS" -gt 0 ]; then
    echo "$SUCCESSFUL_CHECKOUTS" > "$STEPS_PIPE/successful"
  fi

  STEP_JSON=$(echo "$STEP_JSON" | jq --argjson max_active "$MAX_ACTIVE" --argjson first_error "$FIRST_ERROR_AT_ACTIVE" --argjson successful "$SUCCESSFUL_CHECKOUTS" -rc '.max_active = $max_active | .first_error_at_active = $first_error | .successful = $successful')

  echo "$STEP_JSON"
}

function print_table() {
  local STEP_JSON=$1
  local no_tput="${2:-0}"
  local row_data
  local step_key
  local key
  while IFS= read -r step_key; do
    local row_data=$(echo "$STEP_JSON" | jq --arg step "$step_key" -rc '.steps[$step]')
    echo "$step_key - $row_data";
    if [ $no_tput -eq 0 ]; then
      tput el       # Clear to end of line
    fi
    continue;
    while IFS= read -r key; do
      local cell=$(echo "$row_data" | jq -rc ".$key")
      printf "%-15s" "$cell"
    done < <(echo "$row_data" | jq -r 'keys_unsorted[]')
    printf "\n"
  done < <(echo "$STEP_JSON" | jq -r '.steps | keys_unsorted[]')
}

function monitor() {
  local STEP

  local STATUS_CODE
  local STATUS_FILE
  local STATUS_AMOUNT
  local STATUS_JSON
  local STEP_ACTIVE
  local STEP_JSON

  local TOTAL_ACTIVE=0
  local MAX_ACTIVE=0
  local FIRST_ERROR_AT_ACTIVE=0
  local SUCCESSFUL_CHECKOUTS=0

  STEP_JSON="$(generate_json)"
  TOTAL_ACTIVE=$(echo "$STEP_JSON" | jq -r '.active')
  MAX_ACTIVE=$(echo "$STEP_JSON" | jq -r '.max_active')
  FIRST_ERROR_AT_ACTIVE=$(echo "$STEP_JSON" | jq -r '.first_error_at_active')
  SUCCESSFUL_CHECKOUTS=$(echo "$STEP_JSON" | jq -r '.successful')

  # Function to draw the table based on data
  draw_table() {
    tput civis    # Hide cursor
    restore_row   # Restore the row
    tput el       # Clear to end of line
    echo "Total Active: $TOTAL_ACTIVE"
    tput el       # Clear to end of line
    echo "Max Active: $MAX_ACTIVE"
    tput el       # Clear to end of line
    echo "First Error: $FIRST_ERROR_AT_ACTIVE"
    tput el       # Clear to end of line
    echo "Successful: $SUCCESSFUL_CHECKOUTS"
    tput el       # Clear to end of line
    echo ""
    print_table "$STEP_JSON"
    tput cnorm    # Show cursor
  }

  draw_table
}

function launch_monitor() {
  clear >&2
  echo "Ramp up: $step minutes"
  echo "Rate: $rate calls added / second"
  echo "Max: $max total users"
  echo ""
  save_row
  (
    while true; do
      sleep 0.1;
      monitor >&2;
      if [ -f "$STEPS_PIPE/monitor_exit" ]; then
        sleep 0.5;
        restore_row >&2
        STEP_JSON="$(generate_json)"
        TOTAL_ACTIVE=$(echo "$STEP_JSON" | jq -r '.active')
        MAX_ACTIVE=$(echo "$STEP_JSON" | jq -r '.max_active')
        FIRST_ERROR_AT_ACTIVE=$(echo "$STEP_JSON" | jq -r '.first_error_at_active')
        SUCCESSFUL_CHECKOUTS=$(echo "$STEP_JSON" | jq -r '.successful')
        tput el >&2
        echo "Total Active: $TOTAL_ACTIVE"
        tput el >&2
        echo "Max Active: $MAX_ACTIVE"
        tput el >&2
        echo "First Error: $FIRST_ERROR_AT_ACTIVE"
        tput el >&2
        echo "Successful: $SUCCESSFUL_CHECKOUTS"
        tput el >&2
        echo ""

        print_table "$STEP_JSON" 1;
        break;
      fi
    done;
  ) &
  MONITOR_PROC=$!
}

function kill_childs() {
  for i in ${CHILD_PROCS[@]}; do
    kill -9 "$i" 2>/dev/null
  done
  kill -15 "${MONITOR_PROC}" 2>/dev/null 1>/dev/null
  exit 1
}

function graceful_exit() {
  # Record the end time
  end_time=$(date +%s.%N)

  touch "$STEPS_PIPE/monitor_exit"
  wait

  STEP_JSON="$(generate_json)"
  SUCCESSFUL_CHECKOUTS=$(echo "$STEP_JSON" | jq -r '.successful')

  elapsed_time=$(echo "scale=0;$end_time - $start_time" | bc)
  tests_elapsed_time=$(echo "scale=0;$end_time - ${tests_start_time:-${end_time}}" | bc)
  iterations_per_second=$(echo "scale=3;$SUCCESSFUL_CHECKOUTS / $tests_elapsed_time" | bc)

  echo ""
  echo "Script execution time: $elapsed_time seconds."
  echo "Tests execution time: $tests_elapsed_time seconds."
  echo "Iterations per second: $iterations_per_second."
}

function woorricane_api() {
  curl -o /dev/null -sSL \
    --connect-timeout 400 \
    --max-time 400 \
    --retry 0 "$HOME_URL/?woorricane_control&action=$1&$1=$2"
}

trap "kill_childs" SIGINT

trap "graceful_exit" EXIT

# Record the start time
start_time=$(date +%s.%N)

LOG_PATH="$PWD/woorricane-logs"

echo "--- Initializing"
step="$2"
if [ -z "${step}" ]; then
  step="1"
fi
max="$1"
if [ -z "${max}" ]; then
  max="100"
fi

if [ "$step" -eq "0" ]; then
  SLEEP="0"
  rate="$max"
else
  SLEEP="$(printf '%.5f\n' "$(echo "scale=5; (${step} * 60) / ${max}" | bc )")"
  rate="$(printf '%d\n' "$(echo "1 / ${SLEEP}" | bc )")"
fi

MAX_USERS="${max}"
USERS="0"

echo "--- Cleaning up"
rm -rf "$LOG_PATH"
rm -f curl-step-*.log

# Lock On Checkout to simulate race
woorricane_api "cleanup" || exit 1

echo "--- Preparing product"
woorricane_api "prepare_product" "$PRODUCT_ID" || exit 1

echo "--- Launching process"
launch_monitor

if [ -z "${WOORRICANE_DIR}" ]; then
	WOORRICANE_DIR="$(pwd)"
fi

tests_start_time=$(date +%s.%N)

export CURRENT_THREAD
while true; do
  USERS=$(( USERS + 1 ));
  CURRENT_THREAD="$USERS"
  bash "${WOORRICANE_DIR}/thread.sh" & # 2>/dev/null 1>/dev/null &
  CHILD_PROCS+=("$!")
  echo -n '0' >> "${LAUNCHED_PIPE}"

  if [ "$step" -ne "0" ]; then
    sleep "${SLEEP}"
  fi

  LIMIT=$(( USERS >= MAX_USERS ));
  if [ $LIMIT == "1" ]; then
    break;
  fi
done

wait "${CHILD_PROCS[@]}"
